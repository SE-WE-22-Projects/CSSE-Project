/* tslint:disable */
/* eslint-disable */
/**
 * backend API
 * backend API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Admission
 */
export interface Admission {
    /**
     * 
     * @type {number}
     * @memberof Admission
     */
    'admissionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Admission
     */
    'admissionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Admission
     */
    'dischargeDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Admission
     */
    'description'?: string;
    /**
     * 
     * @type {Appointment}
     * @memberof Admission
     */
    'appointment'?: Appointment;
    /**
     * 
     * @type {Diagnosis}
     * @memberof Admission
     */
    'diagnosis'?: Diagnosis;
    /**
     * 
     * @type {Array<Report>}
     * @memberof Admission
     */
    'reports'?: Array<Report>;
}
/**
 * 
 * @export
 * @interface AdmissionRequest
 */
export interface AdmissionRequest {
    /**
     * 
     * @type {string}
     * @memberof AdmissionRequest
     */
    'admissionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionRequest
     */
    'dischargeDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdmissionRequest
     */
    'appointmentId'?: number;
}
/**
 * 
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'appointmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'queueNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'status'?: AppointmentStatusEnum;
    /**
     * 
     * @type {Patient}
     * @memberof Appointment
     */
    'patient'?: Patient;
    /**
     * 
     * @type {Schedule}
     * @memberof Appointment
     */
    'schedule'?: Schedule;
}

export const AppointmentStatusEnum = {
    Pending: 'PENDING'
} as const;

export type AppointmentStatusEnum = typeof AppointmentStatusEnum[keyof typeof AppointmentStatusEnum];

/**
 * 
 * @export
 * @interface AppointmentRequest
 */
export interface AppointmentRequest {
    /**
     * 
     * @type {string}
     * @memberof AppointmentRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentRequest
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppointmentRequest
     */
    'queueNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppointmentRequest
     */
    'patientId'?: number;
}
/**
 * 
 * @export
 * @interface Bill
 */
export interface Bill {
    /**
     * 
     * @type {number}
     * @memberof Bill
     */
    'billId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof Bill
     */
    'total'?: number;
    /**
     * 
     * @type {Payment}
     * @memberof Bill
     */
    'payment'?: Payment;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    'paymentDate'?: string;
}
/**
 * 
 * @export
 * @interface BillRequest
 */
export interface BillRequest {
    /**
     * 
     * @type {string}
     * @memberof BillRequest
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof BillRequest
     */
    'totalPayment'?: number;
}
/**
 * 
 * @export
 * @interface Charge
 */
export interface Charge {
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    'chargeId'?: number;
    /**
     * 
     * @type {Appointment}
     * @memberof Charge
     */
    'appointment'?: Appointment;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'departmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DepartmentRequest
 */
export interface DepartmentRequest {
    /**
     * 
     * @type {string}
     * @memberof DepartmentRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Diagnosis
 */
export interface Diagnosis {
    /**
     * 
     * @type {number}
     * @memberof Diagnosis
     */
    'diagnosisId'?: number;
    /**
     * 
     * @type {Patient}
     * @memberof Diagnosis
     */
    'patient'?: Patient;
    /**
     * 
     * @type {Doctor}
     * @memberof Diagnosis
     */
    'doctor'?: Doctor;
    /**
     * 
     * @type {Appointment}
     * @memberof Diagnosis
     */
    'appointment'?: Appointment;
    /**
     * 
     * @type {string}
     * @memberof Diagnosis
     */
    'diagnosis'?: string;
    /**
     * 
     * @type {string}
     * @memberof Diagnosis
     */
    'prescription'?: string;
}
/**
 * 
 * @export
 * @interface DiagnosisRequest
 */
export interface DiagnosisRequest {
    /**
     * 
     * @type {number}
     * @memberof DiagnosisRequest
     */
    'patientId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiagnosisRequest
     */
    'doctorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiagnosisRequest
     */
    'appointmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DiagnosisRequest
     */
    'diagnosis'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosisRequest
     */
    'prescription'?: string;
}
/**
 * 
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'speciality'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'regNo'?: string;
    /**
     * 
     * @type {Department}
     * @memberof Doctor
     */
    'department'?: Department;
    /**
     * 
     * @type {Ward}
     * @memberof Doctor
     */
    'ward'?: Ward;
    /**
     * 
     * @type {number}
     * @memberof Doctor
     */
    'personId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'role'?: DoctorRoleEnum;
}

export const DoctorRoleEnum = {
    User: 'USER',
    Staff: 'STAFF',
    Admin: 'ADMIN'
} as const;

export type DoctorRoleEnum = typeof DoctorRoleEnum[keyof typeof DoctorRoleEnum];

/**
 * 
 * @export
 * @interface DoctorRequest
 */
export interface DoctorRequest {
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'speciality'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'regNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof DoctorRequest
     */
    'departmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorRequest
     */
    'wardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface MedicalService
 */
export interface MedicalService {
    /**
     * 
     * @type {number}
     * @memberof MedicalService
     */
    'serviceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalService
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalService
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalService
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof MedicalService
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface MedicalServiceRequest
 */
export interface MedicalServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof MedicalServiceRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalServiceRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalServiceRequest
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof MedicalServiceRequest
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface MedicalStaff
 */
export interface MedicalStaff {
    /**
     * 
     * @type {Department}
     * @memberof MedicalStaff
     */
    'department'?: Department;
    /**
     * 
     * @type {Ward}
     * @memberof MedicalStaff
     */
    'ward'?: Ward;
    /**
     * 
     * @type {number}
     * @memberof MedicalStaff
     */
    'personId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaff
     */
    'role'?: MedicalStaffRoleEnum;
}

export const MedicalStaffRoleEnum = {
    User: 'USER',
    Staff: 'STAFF',
    Admin: 'ADMIN'
} as const;

export type MedicalStaffRoleEnum = typeof MedicalStaffRoleEnum[keyof typeof MedicalStaffRoleEnum];

/**
 * 
 * @export
 * @interface MedicalStaffRequest
 */
export interface MedicalStaffRequest {
    /**
     * 
     * @type {number}
     * @memberof MedicalStaffRequest
     */
    'departmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MedicalStaffRequest
     */
    'wardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalStaffRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'emergencyContactNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    'personId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'role'?: PatientRoleEnum;
}

export const PatientRoleEnum = {
    User: 'USER',
    Staff: 'STAFF',
    Admin: 'ADMIN'
} as const;

export type PatientRoleEnum = typeof PatientRoleEnum[keyof typeof PatientRoleEnum];

/**
 * 
 * @export
 * @interface PatientRequest
 */
export interface PatientRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'emergencyContactNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'paymentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'paymentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'paymentDate'?: string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'reportId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'status'?: string;
    /**
     * 
     * @type {MedicalService}
     * @memberof Report
     */
    'medicalService'?: MedicalService;
    /**
     * 
     * @type {Admission}
     * @memberof Report
     */
    'admission'?: Admission;
}
/**
 * 
 * @export
 * @interface ReportRequest
 */
export interface ReportRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportRequest
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportRequest
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof ReportRequest
     */
    'serviceId'?: number;
}
/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'day'?: ScheduleDayEnum;
    /**
     * 
     * @type {Doctor}
     * @memberof Schedule
     */
    'doctor'?: Doctor;
}

export const ScheduleDayEnum = {
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;

export type ScheduleDayEnum = typeof ScheduleDayEnum[keyof typeof ScheduleDayEnum];

/**
 * 
 * @export
 * @interface ScheduleRequest
 */
export interface ScheduleRequest {
    /**
     * 
     * @type {string}
     * @memberof ScheduleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRequest
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRequest
     */
    'day'?: ScheduleRequestDayEnum;
    /**
     * 
     * @type {number}
     * @memberof ScheduleRequest
     */
    'doctorId'?: number;
}

export const ScheduleRequestDayEnum = {
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;

export type ScheduleRequestDayEnum = typeof ScheduleRequestDayEnum[keyof typeof ScheduleRequestDayEnum];

/**
 * 
 * @export
 * @interface Ward
 */
export interface Ward {
    /**
     * 
     * @type {number}
     * @memberof Ward
     */
    'wardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ward
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ward
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ward
     */
    'location'?: string;
}
/**
 * 
 * @export
 * @interface WardRequest
 */
export interface WardRequest {
    /**
     * 
     * @type {string}
     * @memberof WardRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof WardRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof WardRequest
     */
    'location'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST api/admission
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmission: async (admissionRequest: AdmissionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionRequest' is not null or undefined
            assertParamExists('createAdmission', 'admissionRequest', admissionRequest)
            const localVarPath = `/api/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/appointment
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (appointmentRequest: AppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentRequest' is not null or undefined
            assertParamExists('createAppointment', 'appointmentRequest', appointmentRequest)
            const localVarPath = `/api/appointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/bill
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBill: async (billRequest: BillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billRequest' is not null or undefined
            assertParamExists('createBill', 'billRequest', billRequest)
            const localVarPath = `/api/bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/charge
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharge: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createCharge', 'body', body)
            const localVarPath = `/api/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/department
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (departmentRequest: DepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentRequest' is not null or undefined
            assertParamExists('createDepartment', 'departmentRequest', departmentRequest)
            const localVarPath = `/api/department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/diagnosis
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiagnosis: async (diagnosisRequest: DiagnosisRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagnosisRequest' is not null or undefined
            assertParamExists('createDiagnosis', 'diagnosisRequest', diagnosisRequest)
            const localVarPath = `/api/diagnosis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diagnosisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/doctor
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDoctor: async (doctorRequest: DoctorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'doctorRequest' is not null or undefined
            assertParamExists('createDoctor', 'doctorRequest', doctorRequest)
            const localVarPath = `/api/doctor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(doctorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/patient
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatient: async (patientRequest: PatientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRequest' is not null or undefined
            assertParamExists('createPatient', 'patientRequest', patientRequest)
            const localVarPath = `/api/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/payment
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPayment', 'body', body)
            const localVarPath = `/api/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/report
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (reportRequest: ReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportRequest' is not null or undefined
            assertParamExists('createReport', 'reportRequest', reportRequest)
            const localVarPath = `/api/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/schedule
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule: async (scheduleRequest: ScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleRequest' is not null or undefined
            assertParamExists('createSchedule', 'scheduleRequest', scheduleRequest)
            const localVarPath = `/api/schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/service
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService: async (medicalServiceRequest: MedicalServiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'medicalServiceRequest' is not null or undefined
            assertParamExists('createService', 'medicalServiceRequest', medicalServiceRequest)
            const localVarPath = `/api/service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/staff
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStaff: async (medicalStaffRequest: MedicalStaffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'medicalStaffRequest' is not null or undefined
            assertParamExists('createStaff', 'medicalStaffRequest', medicalStaffRequest)
            const localVarPath = `/api/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalStaffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/ward
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWard: async (wardRequest: WardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wardRequest' is not null or undefined
            assertParamExists('createWard', 'wardRequest', wardRequest)
            const localVarPath = `/api/ward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmission: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdmission', 'id', id)
            const localVarPath = `/api/admission/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppointment', 'id', id)
            const localVarPath = `/api/appointment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBill: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBill', 'id', id)
            const localVarPath = `/api/bill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChargeById', 'id', id)
            const localVarPath = `/api/charge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDepartment', 'id', id)
            const localVarPath = `/api/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiagnosis: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDiagnosis', 'id', id)
            const localVarPath = `/api/diagnosis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctor: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDoctor', 'id', id)
            const localVarPath = `/api/doctor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePatient', 'id', id)
            const localVarPath = `/api/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePayment', 'id', id)
            const localVarPath = `/api/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReport', 'id', id)
            const localVarPath = `/api/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSchedule', 'id', id)
            const localVarPath = `/api/schedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteService', 'id', id)
            const localVarPath = `/api/service/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStaff: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStaff', 'id', id)
            const localVarPath = `/api/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWard', 'id', id)
            const localVarPath = `/api/ward/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/admission/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdmissionByAppointment: async (appointmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('findAdmissionByAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/api/admission/appointment/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/admission/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdmissionsByPatient: async (patientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('findAdmissionsByPatient', 'patientId', patientId)
            const localVarPath = `/api/admission/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/appointment/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointmentsByPatient: async (patientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('findAppointmentsByPatient', 'patientId', patientId)
            const localVarPath = `/api/appointment/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/appointment/schedule/{scheduleId}
         * @param {number} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointmentsBySchedule: async (scheduleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('findAppointmentsBySchedule', 'scheduleId', scheduleId)
            const localVarPath = `/api/appointment/schedule/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/appointment/doctor/{doctorId}
         * @param {number} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointsByDoctor: async (doctorId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'doctorId' is not null or undefined
            assertParamExists('findAppointsByDoctor', 'doctorId', doctorId)
            const localVarPath = `/api/appointment/doctor/{doctorId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/diagnosis/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDiagnosisByAppointment: async (appointmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('findDiagnosisByAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/api/diagnosis/appointment/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/diagnosis/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDiagnosisByPatient: async (patientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('findDiagnosisByPatient', 'patientId', patientId)
            const localVarPath = `/api/diagnosis/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/doctor/department/{departmentId}
         * @param {number} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDoctorsByDepartment: async (departmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('findDoctorsByDepartment', 'departmentId', departmentId)
            const localVarPath = `/api/doctor/department/{departmentId}`
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/doctor/ward/{wardId}
         * @param {number} wardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDoctorsByWard: async (wardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wardId' is not null or undefined
            assertParamExists('findDoctorsByWard', 'wardId', wardId)
            const localVarPath = `/api/doctor/ward/{wardId}`
                .replace(`{${"wardId"}}`, encodeURIComponent(String(wardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/report/admission/medicalservice/{admissionId}/{medicalServiceId}
         * @param {number} admissionId 
         * @param {number} medicalServiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findReportsByAdmissionAndMedicalService: async (admissionId: number, medicalServiceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionId' is not null or undefined
            assertParamExists('findReportsByAdmissionAndMedicalService', 'admissionId', admissionId)
            // verify required parameter 'medicalServiceId' is not null or undefined
            assertParamExists('findReportsByAdmissionAndMedicalService', 'medicalServiceId', medicalServiceId)
            const localVarPath = `/api/report/admission/medicalservice/{admissionId}/{medicalServiceId}`
                .replace(`{${"admissionId"}}`, encodeURIComponent(String(admissionId)))
                .replace(`{${"medicalServiceId"}}`, encodeURIComponent(String(medicalServiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissionById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdmissionById', 'id', id)
            const localVarPath = `/api/admission/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/admission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/appointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/bill
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBills: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/charge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCharges: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/diagnosis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDiagnosis: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/diagnosis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/doctor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDoctors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/doctor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPatients: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSStaff: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/ward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppointmentById', 'id', id)
            const localVarPath = `/api/appointment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBillById', 'id', id)
            const localVarPath = `/api/bill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getChargeById', 'id', id)
            const localVarPath = `/api/charge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDepartmentById', 'id', id)
            const localVarPath = `/api/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiagnosisById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDiagnosisById', 'id', id)
            const localVarPath = `/api/diagnosis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDoctorById', 'id', id)
            const localVarPath = `/api/doctor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPatientById', 'id', id)
            const localVarPath = `/api/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaymentById', 'id', id)
            const localVarPath = `/api/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReportById', 'id', id)
            const localVarPath = `/api/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScheduleById', 'id', id)
            const localVarPath = `/api/schedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getServiceById', 'id', id)
            const localVarPath = `/api/service/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStaffById', 'id', id)
            const localVarPath = `/api/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWardById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWardById', 'id', id)
            const localVarPath = `/api/ward/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST api/auth/set_password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPassword: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('setPassword', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/set_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/admission/{id}
         * @param {number} id 
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmission: async (id: number, admissionRequest: AdmissionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAdmission', 'id', id)
            // verify required parameter 'admissionRequest' is not null or undefined
            assertParamExists('updateAdmission', 'admissionRequest', admissionRequest)
            const localVarPath = `/api/admission/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/appointment/{id}
         * @param {number} id 
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment: async (id: number, appointmentRequest: AppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAppointment', 'id', id)
            // verify required parameter 'appointmentRequest' is not null or undefined
            assertParamExists('updateAppointment', 'appointmentRequest', appointmentRequest)
            const localVarPath = `/api/appointment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/bill/{id}
         * @param {number} id 
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBill: async (id: number, billRequest: BillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBill', 'id', id)
            // verify required parameter 'billRequest' is not null or undefined
            assertParamExists('updateBill', 'billRequest', billRequest)
            const localVarPath = `/api/bill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/charge/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeById: async (id: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChargeById', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateChargeById', 'body', body)
            const localVarPath = `/api/charge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/department/{id}
         * @param {number} id 
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment: async (id: number, departmentRequest: DepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDepartment', 'id', id)
            // verify required parameter 'departmentRequest' is not null or undefined
            assertParamExists('updateDepartment', 'departmentRequest', departmentRequest)
            const localVarPath = `/api/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/diagnosis/{id}
         * @param {number} id 
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiagnosis: async (id: number, diagnosisRequest: DiagnosisRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDiagnosis', 'id', id)
            // verify required parameter 'diagnosisRequest' is not null or undefined
            assertParamExists('updateDiagnosis', 'diagnosisRequest', diagnosisRequest)
            const localVarPath = `/api/diagnosis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diagnosisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/doctor/{id}
         * @param {number} id 
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDoctor: async (id: number, doctorRequest: DoctorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDoctor', 'id', id)
            // verify required parameter 'doctorRequest' is not null or undefined
            assertParamExists('updateDoctor', 'doctorRequest', doctorRequest)
            const localVarPath = `/api/doctor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(doctorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/patient/{id}
         * @param {number} id 
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatient: async (id: number, patientRequest: PatientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePatient', 'id', id)
            // verify required parameter 'patientRequest' is not null or undefined
            assertParamExists('updatePatient', 'patientRequest', patientRequest)
            const localVarPath = `/api/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/payment/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment: async (id: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePayment', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePayment', 'body', body)
            const localVarPath = `/api/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/report/{id}
         * @param {number} id 
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: async (id: number, reportRequest: ReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateReport', 'id', id)
            // verify required parameter 'reportRequest' is not null or undefined
            assertParamExists('updateReport', 'reportRequest', reportRequest)
            const localVarPath = `/api/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/schedule/{id}
         * @param {number} id 
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (id: number, scheduleRequest: ScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSchedule', 'id', id)
            // verify required parameter 'scheduleRequest' is not null or undefined
            assertParamExists('updateSchedule', 'scheduleRequest', scheduleRequest)
            const localVarPath = `/api/schedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/service/{id}
         * @param {number} id 
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService: async (id: number, medicalServiceRequest: MedicalServiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateService', 'id', id)
            // verify required parameter 'medicalServiceRequest' is not null or undefined
            assertParamExists('updateService', 'medicalServiceRequest', medicalServiceRequest)
            const localVarPath = `/api/service/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/staff/{id}
         * @param {number} id 
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStaff: async (id: number, medicalStaffRequest: MedicalStaffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStaff', 'id', id)
            // verify required parameter 'medicalStaffRequest' is not null or undefined
            assertParamExists('updateStaff', 'medicalStaffRequest', medicalStaffRequest)
            const localVarPath = `/api/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(medicalStaffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT api/ward/{id}
         * @param {number} id 
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWard: async (id: number, wardRequest: WardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWard', 'id', id)
            // verify required parameter 'wardRequest' is not null or undefined
            assertParamExists('updateWard', 'wardRequest', wardRequest)
            const localVarPath = `/api/ward/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST api/admission
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmission(admissionRequest: AdmissionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdmission(admissionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAdmission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/appointment
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(appointmentRequest: AppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Appointment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(appointmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/bill
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBill(billRequest: BillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBill(billRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/charge
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCharge(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Charge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCharge(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCharge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/department
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(departmentRequest: DepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(departmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/diagnosis
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiagnosis(diagnosisRequest: DiagnosisRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diagnosis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDiagnosis(diagnosisRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDiagnosis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/doctor
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDoctor(doctorRequest: DoctorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDoctor(doctorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDoctor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/patient
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatient(patientRequest: PatientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatient(patientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/payment
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayment(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayment(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/report
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(reportRequest: ReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(reportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/schedule
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchedule(scheduleRequest: ScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchedule(scheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/service
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService(medicalServiceRequest: MedicalServiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createService(medicalServiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/staff
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStaff(medicalStaffRequest: MedicalStaffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalStaff>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStaff(medicalStaffRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/ward
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWard(wardRequest: WardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ward>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWard(wardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createWard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmission(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmission(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteAdmission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBill(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBill(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChargeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChargeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteChargeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiagnosis(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDiagnosis(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDiagnosis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoctor(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDoctor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDoctor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatient(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletePatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePayment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePayment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletePayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchedule(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchedule(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteService(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStaff(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStaff(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DELETE api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/admission/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAdmissionByAppointment(appointmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAdmissionByAppointment(appointmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAdmissionByAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/admission/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAdmissionsByPatient(patientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAdmissionsByPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAdmissionsByPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/appointment/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAppointmentsByPatient(patientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAppointmentsByPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAppointmentsByPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/appointment/schedule/{scheduleId}
         * @param {number} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAppointmentsBySchedule(scheduleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAppointmentsBySchedule(scheduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAppointmentsBySchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/appointment/doctor/{doctorId}
         * @param {number} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAppointsByDoctor(doctorId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAppointsByDoctor(doctorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAppointsByDoctor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/diagnosis/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDiagnosisByAppointment(appointmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diagnosis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findDiagnosisByAppointment(appointmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findDiagnosisByAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/diagnosis/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDiagnosisByPatient(patientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Diagnosis>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findDiagnosisByPatient(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findDiagnosisByPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/doctor/department/{departmentId}
         * @param {number} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDoctorsByDepartment(departmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Doctor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findDoctorsByDepartment(departmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findDoctorsByDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/doctor/ward/{wardId}
         * @param {number} wardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDoctorsByWard(wardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Doctor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findDoctorsByWard(wardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findDoctorsByWard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/report/admission/medicalservice/{admissionId}/{medicalServiceId}
         * @param {number} admissionId 
         * @param {number} medicalServiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findReportsByAdmissionAndMedicalService(admissionId: number, medicalServiceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findReportsByAdmissionAndMedicalService(admissionId, medicalServiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findReportsByAdmissionAndMedicalService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmissionById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmissionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAdmissionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/admission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdmissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdmissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllAdmissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAppointments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAppointments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllAppointments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/bill
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBills(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bill>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBills(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllBills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/charge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCharges(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Charge>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCharges(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllCharges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDepartments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDepartments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllDepartments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/diagnosis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDiagnosis(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Diagnosis>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDiagnosis(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllDiagnosis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/doctor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDoctors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Doctor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDoctors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllDoctors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPatients(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Patient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPatients(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllPatients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllPayments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSStaff(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalStaff>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSStaff(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllSStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSchedules(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Schedule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSchedules(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllSchedules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllServices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalService>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllServices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllServices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/ward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ward>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllWards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Appointment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAppointmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBillById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Charge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChargeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDepartmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiagnosisById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diagnosis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiagnosisById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDiagnosisById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDoctorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDoctorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPatientById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPaymentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getReportById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScheduleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getServiceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalStaff>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStaffById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWardById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ward>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GET 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.index']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary POST api/auth/set_password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPassword(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPassword(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/admission/{id}
         * @param {number} id 
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmission(id: number, admissionRequest: AdmissionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmission(id, admissionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAdmission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/appointment/{id}
         * @param {number} id 
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointment(id: number, appointmentRequest: AppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Appointment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointment(id, appointmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/bill/{id}
         * @param {number} id 
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBill(id: number, billRequest: BillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBill(id, billRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/charge/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChargeById(id: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Charge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChargeById(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateChargeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/department/{id}
         * @param {number} id 
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDepartment(id: number, departmentRequest: DepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDepartment(id, departmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/diagnosis/{id}
         * @param {number} id 
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDiagnosis(id: number, diagnosisRequest: DiagnosisRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diagnosis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDiagnosis(id, diagnosisRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDiagnosis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/doctor/{id}
         * @param {number} id 
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDoctor(id: number, doctorRequest: DoctorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDoctor(id, doctorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDoctor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/patient/{id}
         * @param {number} id 
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePatient(id: number, patientRequest: PatientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatient(id, patientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatePatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/payment/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayment(id: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayment(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatePayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/report/{id}
         * @param {number} id 
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReport(id: number, reportRequest: ReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReport(id, reportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/schedule/{id}
         * @param {number} id 
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(id: number, scheduleRequest: ScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(id, scheduleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/service/{id}
         * @param {number} id 
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(id: number, medicalServiceRequest: MedicalServiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateService(id, medicalServiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/staff/{id}
         * @param {number} id 
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStaff(id: number, medicalStaffRequest: MedicalStaffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalStaff>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStaff(id, medicalStaffRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary PUT api/ward/{id}
         * @param {number} id 
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWard(id: number, wardRequest: WardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ward>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWard(id, wardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateWard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary POST api/admission
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmission(admissionRequest: AdmissionRequest, options?: any): AxiosPromise<Admission> {
            return localVarFp.createAdmission(admissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/appointment
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentRequest: AppointmentRequest, options?: any): AxiosPromise<Appointment> {
            return localVarFp.createAppointment(appointmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/bill
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBill(billRequest: BillRequest, options?: any): AxiosPromise<Bill> {
            return localVarFp.createBill(billRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/charge
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCharge(body: object, options?: any): AxiosPromise<Charge> {
            return localVarFp.createCharge(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/department
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(departmentRequest: DepartmentRequest, options?: any): AxiosPromise<Department> {
            return localVarFp.createDepartment(departmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/diagnosis
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiagnosis(diagnosisRequest: DiagnosisRequest, options?: any): AxiosPromise<Diagnosis> {
            return localVarFp.createDiagnosis(diagnosisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/doctor
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDoctor(doctorRequest: DoctorRequest, options?: any): AxiosPromise<Doctor> {
            return localVarFp.createDoctor(doctorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/patient
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatient(patientRequest: PatientRequest, options?: any): AxiosPromise<Patient> {
            return localVarFp.createPatient(patientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/payment
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(body: object, options?: any): AxiosPromise<Payment> {
            return localVarFp.createPayment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/report
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(reportRequest: ReportRequest, options?: any): AxiosPromise<Report> {
            return localVarFp.createReport(reportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/schedule
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(scheduleRequest: ScheduleRequest, options?: any): AxiosPromise<Schedule> {
            return localVarFp.createSchedule(scheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/service
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService(medicalServiceRequest: MedicalServiceRequest, options?: any): AxiosPromise<MedicalService> {
            return localVarFp.createService(medicalServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/staff
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStaff(medicalStaffRequest: MedicalStaffRequest, options?: any): AxiosPromise<MedicalStaff> {
            return localVarFp.createStaff(medicalStaffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/ward
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWard(wardRequest: WardRequest, options?: any): AxiosPromise<Ward> {
            return localVarFp.createWard(wardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmission(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteAdmission(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteAppointment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBill(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteBill(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeById(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteChargeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteDepartment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiagnosis(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteDiagnosis(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctor(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteDoctor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deletePatient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayment(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deletePayment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteSchedule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteService(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStaff(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteStaff(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DELETE api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWard(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteWard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/admission/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdmissionByAppointment(appointmentId: number, options?: any): AxiosPromise<Admission> {
            return localVarFp.findAdmissionByAppointment(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/admission/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdmissionsByPatient(patientId: number, options?: any): AxiosPromise<Array<Admission>> {
            return localVarFp.findAdmissionsByPatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/appointment/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointmentsByPatient(patientId: number, options?: any): AxiosPromise<Array<Appointment>> {
            return localVarFp.findAppointmentsByPatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/appointment/schedule/{scheduleId}
         * @param {number} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointmentsBySchedule(scheduleId: number, options?: any): AxiosPromise<Array<Appointment>> {
            return localVarFp.findAppointmentsBySchedule(scheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/appointment/doctor/{doctorId}
         * @param {number} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppointsByDoctor(doctorId: number, options?: any): AxiosPromise<Array<Appointment>> {
            return localVarFp.findAppointsByDoctor(doctorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/diagnosis/appointment/{appointmentId}
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDiagnosisByAppointment(appointmentId: number, options?: any): AxiosPromise<Diagnosis> {
            return localVarFp.findDiagnosisByAppointment(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/diagnosis/patient/{patientId}
         * @param {number} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDiagnosisByPatient(patientId: number, options?: any): AxiosPromise<Array<Diagnosis>> {
            return localVarFp.findDiagnosisByPatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/doctor/department/{departmentId}
         * @param {number} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDoctorsByDepartment(departmentId: number, options?: any): AxiosPromise<Array<Doctor>> {
            return localVarFp.findDoctorsByDepartment(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/doctor/ward/{wardId}
         * @param {number} wardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDoctorsByWard(wardId: number, options?: any): AxiosPromise<Array<Doctor>> {
            return localVarFp.findDoctorsByWard(wardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/report/admission/medicalservice/{admissionId}/{medicalServiceId}
         * @param {number} admissionId 
         * @param {number} medicalServiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findReportsByAdmissionAndMedicalService(admissionId: number, medicalServiceId: number, options?: any): AxiosPromise<Array<Report>> {
            return localVarFp.findReportsByAdmissionAndMedicalService(admissionId, medicalServiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/admission/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissionById(id: number, options?: any): AxiosPromise<Admission> {
            return localVarFp.getAdmissionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/admission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmissions(options?: any): AxiosPromise<Array<Admission>> {
            return localVarFp.getAllAdmissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/appointment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointments(options?: any): AxiosPromise<Array<Appointment>> {
            return localVarFp.getAllAppointments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/bill
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBills(options?: any): AxiosPromise<Array<Bill>> {
            return localVarFp.getAllBills(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/charge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCharges(options?: any): AxiosPromise<Array<Charge>> {
            return localVarFp.getAllCharges(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments(options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.getAllDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/diagnosis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDiagnosis(options?: any): AxiosPromise<Array<Diagnosis>> {
            return localVarFp.getAllDiagnosis(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/doctor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDoctors(options?: any): AxiosPromise<Array<Doctor>> {
            return localVarFp.getAllDoctors(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPatients(options?: any): AxiosPromise<Array<Patient>> {
            return localVarFp.getAllPatients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayments(options?: any): AxiosPromise<Array<Payment>> {
            return localVarFp.getAllPayments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports(options?: any): AxiosPromise<Array<Report>> {
            return localVarFp.getAllReports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSStaff(options?: any): AxiosPromise<Array<MedicalStaff>> {
            return localVarFp.getAllSStaff(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules(options?: any): AxiosPromise<Array<Schedule>> {
            return localVarFp.getAllSchedules(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices(options?: any): AxiosPromise<Array<MedicalService>> {
            return localVarFp.getAllServices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/ward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWards(options?: any): AxiosPromise<Array<Ward>> {
            return localVarFp.getAllWards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/appointment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentById(id: number, options?: any): AxiosPromise<Appointment> {
            return localVarFp.getAppointmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/bill/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillById(id: number, options?: any): AxiosPromise<Bill> {
            return localVarFp.getBillById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeById(id: number, options?: any): AxiosPromise<Charge> {
            return localVarFp.getChargeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/department/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById(id: number, options?: any): AxiosPromise<Department> {
            return localVarFp.getDepartmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/diagnosis/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiagnosisById(id: number, options?: any): AxiosPromise<Diagnosis> {
            return localVarFp.getDiagnosisById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/doctor/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorById(id: number, options?: any): AxiosPromise<Doctor> {
            return localVarFp.getDoctorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/patient/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientById(id: number, options?: any): AxiosPromise<Patient> {
            return localVarFp.getPatientById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/payment/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentById(id: number, options?: any): AxiosPromise<Payment> {
            return localVarFp.getPaymentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/report/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById(id: number, options?: any): AxiosPromise<Report> {
            return localVarFp.getReportById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/schedule/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleById(id: number, options?: any): AxiosPromise<Schedule> {
            return localVarFp.getScheduleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/service/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById(id: number, options?: any): AxiosPromise<MedicalService> {
            return localVarFp.getServiceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/staff/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffById(id: number, options?: any): AxiosPromise<MedicalStaff> {
            return localVarFp.getStaffById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/ward/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWardById(id: number, options?: any): AxiosPromise<Ward> {
            return localVarFp.getWardById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<string> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/auth/login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<string> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST api/auth/set_password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPassword(loginRequest: LoginRequest, options?: any): AxiosPromise<string> {
            return localVarFp.setPassword(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/admission/{id}
         * @param {number} id 
         * @param {AdmissionRequest} admissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmission(id: number, admissionRequest: AdmissionRequest, options?: any): AxiosPromise<Admission> {
            return localVarFp.updateAdmission(id, admissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/appointment/{id}
         * @param {number} id 
         * @param {AppointmentRequest} appointmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment(id: number, appointmentRequest: AppointmentRequest, options?: any): AxiosPromise<Appointment> {
            return localVarFp.updateAppointment(id, appointmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/bill/{id}
         * @param {number} id 
         * @param {BillRequest} billRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBill(id: number, billRequest: BillRequest, options?: any): AxiosPromise<Bill> {
            return localVarFp.updateBill(id, billRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/charge/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeById(id: number, body: object, options?: any): AxiosPromise<Charge> {
            return localVarFp.updateChargeById(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/department/{id}
         * @param {number} id 
         * @param {DepartmentRequest} departmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment(id: number, departmentRequest: DepartmentRequest, options?: any): AxiosPromise<Department> {
            return localVarFp.updateDepartment(id, departmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/diagnosis/{id}
         * @param {number} id 
         * @param {DiagnosisRequest} diagnosisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiagnosis(id: number, diagnosisRequest: DiagnosisRequest, options?: any): AxiosPromise<Diagnosis> {
            return localVarFp.updateDiagnosis(id, diagnosisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/doctor/{id}
         * @param {number} id 
         * @param {DoctorRequest} doctorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDoctor(id: number, doctorRequest: DoctorRequest, options?: any): AxiosPromise<Doctor> {
            return localVarFp.updateDoctor(id, doctorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/patient/{id}
         * @param {number} id 
         * @param {PatientRequest} patientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatient(id: number, patientRequest: PatientRequest, options?: any): AxiosPromise<Patient> {
            return localVarFp.updatePatient(id, patientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/payment/{id}
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment(id: number, body: object, options?: any): AxiosPromise<Payment> {
            return localVarFp.updatePayment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/report/{id}
         * @param {number} id 
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport(id: number, reportRequest: ReportRequest, options?: any): AxiosPromise<Report> {
            return localVarFp.updateReport(id, reportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/schedule/{id}
         * @param {number} id 
         * @param {ScheduleRequest} scheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(id: number, scheduleRequest: ScheduleRequest, options?: any): AxiosPromise<Schedule> {
            return localVarFp.updateSchedule(id, scheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/service/{id}
         * @param {number} id 
         * @param {MedicalServiceRequest} medicalServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService(id: number, medicalServiceRequest: MedicalServiceRequest, options?: any): AxiosPromise<MedicalService> {
            return localVarFp.updateService(id, medicalServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/staff/{id}
         * @param {number} id 
         * @param {MedicalStaffRequest} medicalStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStaff(id: number, medicalStaffRequest: MedicalStaffRequest, options?: any): AxiosPromise<MedicalStaff> {
            return localVarFp.updateStaff(id, medicalStaffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PUT api/ward/{id}
         * @param {number} id 
         * @param {WardRequest} wardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWard(id: number, wardRequest: WardRequest, options?: any): AxiosPromise<Ward> {
            return localVarFp.updateWard(id, wardRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary POST api/admission
     * @param {AdmissionRequest} admissionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAdmission(admissionRequest: AdmissionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAdmission(admissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/appointment
     * @param {AppointmentRequest} appointmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAppointment(appointmentRequest: AppointmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAppointment(appointmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/bill
     * @param {BillRequest} billRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBill(billRequest: BillRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBill(billRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/charge
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCharge(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCharge(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/department
     * @param {DepartmentRequest} departmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDepartment(departmentRequest: DepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDepartment(departmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/diagnosis
     * @param {DiagnosisRequest} diagnosisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDiagnosis(diagnosisRequest: DiagnosisRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDiagnosis(diagnosisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/doctor
     * @param {DoctorRequest} doctorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDoctor(doctorRequest: DoctorRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDoctor(doctorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/patient
     * @param {PatientRequest} patientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPatient(patientRequest: PatientRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPatient(patientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/payment
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPayment(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPayment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/report
     * @param {ReportRequest} reportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createReport(reportRequest: ReportRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createReport(reportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/schedule
     * @param {ScheduleRequest} scheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSchedule(scheduleRequest: ScheduleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSchedule(scheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/service
     * @param {MedicalServiceRequest} medicalServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createService(medicalServiceRequest: MedicalServiceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createService(medicalServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/staff
     * @param {MedicalStaffRequest} medicalStaffRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createStaff(medicalStaffRequest: MedicalStaffRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createStaff(medicalStaffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/ward
     * @param {WardRequest} wardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createWard(wardRequest: WardRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createWard(wardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/admission/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdmission(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAdmission(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/appointment/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAppointment(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAppointment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/bill/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBill(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBill(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/charge/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteChargeById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteChargeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/department/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDepartment(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDepartment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/diagnosis/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDiagnosis(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDiagnosis(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/doctor/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDoctor(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDoctor(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/patient/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePatient(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePatient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/payment/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePayment(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePayment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/report/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReport(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/schedule/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSchedule(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSchedule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/service/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteService(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteService(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/staff/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStaff(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStaff(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DELETE api/ward/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWard(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/admission/appointment/{appointmentId}
     * @param {number} appointmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAdmissionByAppointment(appointmentId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAdmissionByAppointment(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/admission/patient/{patientId}
     * @param {number} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAdmissionsByPatient(patientId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAdmissionsByPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/appointment/patient/{patientId}
     * @param {number} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAppointmentsByPatient(patientId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAppointmentsByPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/appointment/schedule/{scheduleId}
     * @param {number} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAppointmentsBySchedule(scheduleId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAppointmentsBySchedule(scheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/appointment/doctor/{doctorId}
     * @param {number} doctorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAppointsByDoctor(doctorId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAppointsByDoctor(doctorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/diagnosis/appointment/{appointmentId}
     * @param {number} appointmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findDiagnosisByAppointment(appointmentId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findDiagnosisByAppointment(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/diagnosis/patient/{patientId}
     * @param {number} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findDiagnosisByPatient(patientId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findDiagnosisByPatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/doctor/department/{departmentId}
     * @param {number} departmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findDoctorsByDepartment(departmentId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findDoctorsByDepartment(departmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/doctor/ward/{wardId}
     * @param {number} wardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findDoctorsByWard(wardId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findDoctorsByWard(wardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/report/admission/medicalservice/{admissionId}/{medicalServiceId}
     * @param {number} admissionId 
     * @param {number} medicalServiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findReportsByAdmissionAndMedicalService(admissionId: number, medicalServiceId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findReportsByAdmissionAndMedicalService(admissionId, medicalServiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/admission/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmissionById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmissionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/admission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllAdmissions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllAdmissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllAppointments(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllAppointments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/bill
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllBills(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllBills(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/charge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllCharges(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllCharges(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllDepartments(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/diagnosis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllDiagnosis(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllDiagnosis(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllDoctors(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllDoctors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllPatients(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllPatients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllPayments(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllPayments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllReports(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllReports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSStaff(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSStaff(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSchedules(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSchedules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllServices(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllServices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/ward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllWards(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllWards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/appointment/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAppointmentById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAppointmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/bill/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBillById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBillById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/charge/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChargeById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChargeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/department/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDepartmentById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDepartmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/diagnosis/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDiagnosisById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDiagnosisById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/doctor/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDoctorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/patient/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPatientById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/payment/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPaymentById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPaymentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/report/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReportById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getReportById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/schedule/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScheduleById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScheduleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/service/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServiceById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getServiceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/staff/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStaffById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStaffById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/ward/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWardById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWardById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public index(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/auth/login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST api/auth/set_password
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setPassword(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setPassword(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/admission/{id}
     * @param {number} id 
     * @param {AdmissionRequest} admissionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdmission(id: number, admissionRequest: AdmissionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAdmission(id, admissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/appointment/{id}
     * @param {number} id 
     * @param {AppointmentRequest} appointmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAppointment(id: number, appointmentRequest: AppointmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAppointment(id, appointmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/bill/{id}
     * @param {number} id 
     * @param {BillRequest} billRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBill(id: number, billRequest: BillRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBill(id, billRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/charge/{id}
     * @param {number} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateChargeById(id: number, body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateChargeById(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/department/{id}
     * @param {number} id 
     * @param {DepartmentRequest} departmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDepartment(id: number, departmentRequest: DepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDepartment(id, departmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/diagnosis/{id}
     * @param {number} id 
     * @param {DiagnosisRequest} diagnosisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDiagnosis(id: number, diagnosisRequest: DiagnosisRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDiagnosis(id, diagnosisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/doctor/{id}
     * @param {number} id 
     * @param {DoctorRequest} doctorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDoctor(id: number, doctorRequest: DoctorRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDoctor(id, doctorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/patient/{id}
     * @param {number} id 
     * @param {PatientRequest} patientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePatient(id: number, patientRequest: PatientRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePatient(id, patientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/payment/{id}
     * @param {number} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePayment(id: number, body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePayment(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/report/{id}
     * @param {number} id 
     * @param {ReportRequest} reportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReport(id: number, reportRequest: ReportRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateReport(id, reportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/schedule/{id}
     * @param {number} id 
     * @param {ScheduleRequest} scheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSchedule(id: number, scheduleRequest: ScheduleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSchedule(id, scheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/service/{id}
     * @param {number} id 
     * @param {MedicalServiceRequest} medicalServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateService(id: number, medicalServiceRequest: MedicalServiceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateService(id, medicalServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/staff/{id}
     * @param {number} id 
     * @param {MedicalStaffRequest} medicalStaffRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStaff(id: number, medicalStaffRequest: MedicalStaffRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStaff(id, medicalStaffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PUT api/ward/{id}
     * @param {number} id 
     * @param {WardRequest} wardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateWard(id: number, wardRequest: WardRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateWard(id, wardRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



