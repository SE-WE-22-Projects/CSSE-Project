/* tslint:disable */
/* eslint-disable */
/**
 * backend API
 * backend API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'appointmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'queueNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'status'?: AppointmentStatusEnum;
    /**
     * 
     * @type {Patient}
     * @memberof Appointment
     */
    'patient'?: Patient;
    /**
     * 
     * @type {Schedule}
     * @memberof Appointment
     */
    'schedule'?: Schedule;
}

export const AppointmentStatusEnum = {
    Pending: 'PENDING'
} as const;

export type AppointmentStatusEnum = typeof AppointmentStatusEnum[keyof typeof AppointmentStatusEnum];

/**
 * 
 * @export
 * @interface Charge
 */
export interface Charge {
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    'chargeId'?: number;
    /**
     * 
     * @type {Appointment}
     * @memberof Charge
     */
    'appointment'?: Appointment;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'departmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'speciality'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'regNo'?: string;
    /**
     * 
     * @type {Department}
     * @memberof Doctor
     */
    'department'?: Department;
    /**
     * 
     * @type {Ward}
     * @memberof Doctor
     */
    'ward'?: Ward;
    /**
     * 
     * @type {number}
     * @memberof Doctor
     */
    'personId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    'phoneNo'?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'emergencyContactNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    'personId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'phoneNo'?: string;
}
/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {number}
     * @memberof Schedule
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'day'?: ScheduleDayEnum;
    /**
     * 
     * @type {Doctor}
     * @memberof Schedule
     */
    'doctor'?: Doctor;
}

export const ScheduleDayEnum = {
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;

export type ScheduleDayEnum = typeof ScheduleDayEnum[keyof typeof ScheduleDayEnum];

/**
 * 
 * @export
 * @interface Ward
 */
export interface Ward {
    /**
     * 
     * @type {number}
     * @memberof Ward
     */
    'wardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ward
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ward
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ward
     */
    'location'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getServiceById', 'id', id)
            const localVarPath = `/api/charge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Charge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getServiceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary GET api/charge/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById(id: number, options?: any): AxiosPromise<Charge> {
            return localVarFp.getServiceById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary GET api/charge/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServiceById(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getServiceById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



